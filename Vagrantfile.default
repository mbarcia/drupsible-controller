# -*- mode: ruby -*-
# vi: set ft=ruby :

#
# Drupsible Vagrantfile
#
require 'yaml'

# Vagrantfile API/syntax version.
VAGRANTFILE_API_VERSION = "2"

# Minimum Vagrant version required
Vagrant.require_version ">= 1.8.1"

settings = YAML.load_file 'vagrant.yml'
HOSTS = settings['hosts']
APPS = settings['apps']

HOSTS.each do |host|
  huplugin = {}

  # Decide the Fully Qualified Domain Name for the host
  if APPS.length < 2
    host['fqdn'] = host['name'] + '.' + host['domain']
  else
    host['fqdn'] = 'drupsible.multi.app'
  end

  # Prepare vagrant-hostsupdater with a legend containing the FQDN
  unless host['ip_addr'].to_s.empty?
    huplugin = { :name => "vagrant-hostsupdater", :version => ">= 1.0.2", :legend => host['ip_addr'] + ' ' + host['fqdn'] }
  end

  # Install vagrant-hostsupdater if any IP is static
  unless huplugin.empty? or Vagrant.has_plugin?(huplugin[:name], huplugin[:version])
    system "echo The hostsupdater plugin enables Drupsible to update /etc/hosts with ie., \"#{huplugin[:legend]}\""
    system "echo This makes your Drupal webapp in the guest VM accessible from your host's browser."
    system "echo Drupsible will now proceed to its installation (one-time only)."
    system "echo"
    system "vagrant plugin install --plugin-version '#{huplugin[:version]}' #{huplugin[:name]}"
  end
end

#
# Vagrant configuration main
#
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  HOSTS.each do |host|

    config.vm.define host['name'] do |machine|
      machine.vm.box     = host['box']
      machine.vm.box_url = host['box_url']
      machine.vm.guest = host['guest_distro']

      # Virtualbox
      machine.vm.provider "virtualbox" do |vb|
        vb.gui    = host['gui']
        vb.memory = host['ram']
        # Configure misc settings
        vb.customize ['modifyvm', :id,
        '--rtcuseutc', 'on',
        '--natdnshostresolver1', 'on',
        '--nictype1', 'virtio',
        '--nictype2', 'virtio']
        vb.customize ["modifyvm", :id, "--pae", host['pae']]
        vb.customize ["modifyvm", :id, "--acpi", host['acpi']]
        vb.customize ["modifyvm", :id, "--ioapic", host['ioapic']]
        vb.customize ["modifyvm", :id, "--chipset", host['chipset']]
      end

      # VMWare
      machine.vm.provider "vmware_fusion" do |vmw, o|
        o.vm.box = host['box']
        o.vm.guest = host['guest_distro']
        vmw.gui = host['gui']
        vmw.vmx["memsize"] = host['ram']
      end

      # Parallels
      machine.vm.provider "parallels" do |p, o|
        o.vm.box = host['box']
        o.vm.guest = host['guest_distro']
        p.memory = host['ram']
        p.update_guest_tools = true
      end

      if host['ip_addr'].to_s.empty?
        machine.vm.network 'public_network', type: 'dhcp'
      else
        machine.vm.network 'private_network', ip: host['ip_addr'], netmask: host['netmask']
      end

      machine.vm.hostname = host['fqdn']

      # Prevent annoying "stdin: not a tty" errors
      config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"

      # SSH setup
      # Vagrant >= 1.7.0 defaults to using a randomly generated RSA key.
      # We need to disable this in order to pass the correct identity from host to guest.
      config.ssh.insert_key = false

      if ARGV[0].eql?'up' or ARGV[0].eql?'provision'
        system("bin/ssh-agent.sh ~/.vagrant.d/insecure_private_key")
      end

      # Allow identities to be passed from host to guest.
      # ssh-agent must be running on the host, the private keys loaded with ssh-add
      config.ssh.forward_agent = true

      # Install Ansible only on the controller machine
      machine.vm.provision "shell" do |sh|
        sh.path = "scripts/drupsible-provision.sh"
      end

      machine.vm.provision "shell",
        inline: 'cat /vagrant/scripts/shortcuts.sh >> /home/vagrant/.profile'

      # Config-deploy each of the apps
      APPS.each do |app|
        machine.vm.provision "shell",
          inline: 'sed "s|pitiribi|' + app['name'] + '|g" /vagrant/scripts/app-aliases.sh >> /home/vagrant/.profile'

        # Scaffold directories and symlinks
        machine.vm.provision "shell" do |sh|
          sh.path = "scripts/scaffold.sh"
          sh.args = [app['name']]
        end

        # Run config-deploy.yml playbook
        machine.vm.provision "shell" do |sh|
          sh.path = "scripts/drupsible-deploy.sh"
          sh.args = [ app['name'], "local", ENV['DEPLOY_ARGS'].to_s, ENV['TAGS'].to_s,  ENV['SKIP_TAGS'].to_s, host['fqdn'], host['ip_addr'].to_s ]
          sh.privileged = false
          sh.keep_color = true
        end
      end # APPS-each
    end # config machine
  end # HOSTS-each
end
