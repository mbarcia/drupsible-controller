# -*- mode: ruby -*-
# vi: set ft=ruby :

#
# Drupsible Vagrantfile
#
require 'yaml'

# Vagrantfile API/syntax version.
VAGRANTFILE_API_VERSION = "2"

# Minimum Vagrant version required
Vagrant.require_version ">= 1.8.1"

def fail_with_message(msg)
  fail Vagrant::Errors::VagrantError.new, msg
end

def key_has_passphrase(private_key_filename)
  return File.open(private_key_filename).grep(/ENCRYPTED/)
end

# Load settings from YAML files
if File.exists?"vagrant.yml"
  settings = YAML.load_file 'vagrant.yml'
else
  fail_with_message "vagrant.yml is not found. Please copy vagrant.\
.yml.default to vagrant.yml, and customize it for your needs."
end
HOSTS = settings['hosts']
APPS = settings['apps']

# Proactive fix of http://stackoverflow.com/a/40521433
if Vagrant::VERSION == "1.8.7"
  if File.exists? "/opt/vagrant/embedded/bin/curl"
    if system "vagrant box list | grep -v " + HOSTS['box'] + " > /dev/null 2>&1"
      puts "There is a knwon bug that may affect your Vagrant setup \
(http://stackoverflow.com/a/40521433)."
      puts "If the  " + HOSTS['box'] + " box cannot be downloaded, you may want to \
remove the curl version shipped with Vagrant:"
      puts "You can do this by typing sudo rm /opt/vagrant/embedded/bin/curl"
    end
  end
end

key_home_dir = "/home/vagrant"
# Default SSH private key file (on the host)
private_key_file = Dir.home + "/.ssh/id_rsa"


HOSTS.each do |host|
  huplugin = {}

  # Decide the Fully Qualified Domain Name for the host
  if APPS.length < 2
    host['fqdn'] = host['name'] + '.' + host['domain']
  else
    host['fqdn'] = 'drupsible.multi.app'
  end

  # Prepare vagrant-hostsupdater with a legend containing the FQDN
  unless host['ip_addr'].to_s.empty?
    huplugin = { :name => "vagrant-hostsupdater", :version => ">= 1.0.2", :legend => host['ip_addr'] + ' ' + host['fqdn'] }
  end

  # Install vagrant-hostsupdater if any IP is static
  unless ARGV[0] == "destroy" or ARGV[0] == "halt" or ARGV[0] == "suspend"
    unless huplugin.empty? or Vagrant.has_plugin?(huplugin[:name], huplugin[:version])
      system "echo The hostsupdater plugin enables Drupsible to update /etc/hosts with ie.,"
      system "echo \"#{huplugin[:legend]}\""
      system "echo This makes your website in the guest VM accessible from your host's browser."
      system "echo Drupsible will now proceed to its installation (one-time only)."
      system "vagrant plugin install --plugin-version '#{huplugin[:version]}' #{huplugin[:name]}"
    end
  end

# Windows-only SMB mount credentials
if Vagrant::Util::Platform.windows?
  if ARGV[0].eql?'up'
    username=ENV['USERNAME']
    if not defined? ENV['SMB_PASSWORD']
      puts "In order to sync folders on Windows, Vagrant requires your real \
  Windows credentials upon vagrant up."
      print "Enter username (Hit enter for " + username + "): "
      STDOUT.flush
      username_entered = STDIN.gets.chomp
      if username_entered != ""
        username=username_entered
      end
      # 8m is the control code to hide characters
      print "Enter password (hidden): \e[0;8m"
      STDOUT.flush
      password = STDIN.gets.chomp
      # 0m is the control code to reset formatting attributes
      puts "\e[0m"
      STDOUT.flush
    else
      password=ENV['SMB_PASSWORD']
    end
  end
end

end

#
# Vagrant configuration main
#
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  if Vagrant::Util::Platform.windows?
    config.vm.synced_folder "/var/www", "/var/www",
      owner: "vagrant",
      group: "www-data",
      type: "smb",
      mount_options: ["mfsymlinks,dir_mode=0755,file_mode=0664"],
      smb_username: username,
      smb_password: password
    config.vm.synced_folder "/etc/ansible", "/etc/ansible",
      owner: "root",
      type: "smb",
      mount_options: ["mfsymlinks,dir_mode=0755,file_mode=0664"],
      smb_username: username,
      smb_password: password
    config.vm.synced_folder '', '/vagrant',
      type: 'smb',
      owner: 'vagrant',
      group: 'vagrant',
      mount_options: ["mfsymlinks,dir_mode=0775,file_mode=0664"],
      smb_username: username,
      smb_password: password
  else
    config.vm.synced_folder "www", "/var/www",
      owner: "vagrant",
      group: "www-data"
    config.vm.synced_folder "/etc/ansible", "/etc/ansible",
      owner: "root",
      type: "smb",
      mount_options: ["mfsymlinks,dir_mode=0755,file_mode=0664"],
      smb_username: username,
      smb_password: password
  end
  
  HOSTS.each do |host|

    config.vm.define host['name'] do |machine|
      machine.vm.box     = host['box']
      machine.vm.box_url = host['box_url']
      machine.vm.guest = host['guest_distro']

      # Virtualbox
      machine.vm.provider "virtualbox" do |vb|
        vb.gui    = host['gui']
        vb.memory = host['ram']
        # Configure misc settings
        vb.customize ['modifyvm', :id,
        '--rtcuseutc', 'on',
        '--natdnshostresolver1', 'on',
        '--nictype1', 'virtio',
        '--nictype2', 'virtio']
        vb.customize ["modifyvm", :id, "--pae", host['pae']]
        vb.customize ["modifyvm", :id, "--acpi", host['acpi']]
        vb.customize ["modifyvm", :id, "--ioapic", host['ioapic']]
        vb.customize ["modifyvm", :id, "--chipset", host['chipset']]
      end

      # VMWare
      machine.vm.provider "vmware_fusion" do |vmw, o|
        o.vm.box = host['box']
        o.vm.guest = host['guest_distro']
        vmw.gui = host['gui']
        vmw.vmx["memsize"] = host['ram']
      end

      # Parallels
      machine.vm.provider "parallels" do |p, o|
        o.vm.box = host['box']
        o.vm.guest = host['guest_distro']
        p.memory = host['ram']
        p.update_guest_tools = true
      end

      if host['ip_addr'].to_s.empty?
        machine.vm.network 'public_network', type: 'dhcp'
      else
        machine.vm.network 'private_network', ip: host['ip_addr'], netmask: host['netmask']
      end

      machine.vm.hostname = host['fqdn']

      # Prevent annoying "stdin: not a tty" errors
      config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"

      # SSH setup
      # Vagrant >= 1.7.0 defaults to using a randomly generated RSA key.
      # We need to disable this in order to pass the correct identity from host to guest.
      config.ssh.insert_key = false

      # Allow identities to be passed from host to guest.
      # ssh-agent must be running on the host, the private keys loaded with ssh-add
      config.ssh.forward_agent = true

      # This allows SSH agent forwarding to work with sudo, if needed.
      # (allows root user to know vagrant user SSH agent socket).
      machine.vm.provision "sudoers",
        :type => "shell",
        :inline => <<-SH_SD.gsub(/^\s+/, '')
          echo "# Added by Drupsible Vagrantfile, to forward the SSH agent to the root user" >> /etc/sudoers
          echo "Defaults        env_keep+=SSH_AUTH_SOCK" >> /etc/sudoers
        SH_SD

      # Copy the unencrypted private key file to the guest.
      # Note that the dest path names need to have those names (only the
      # source private key file may be configurable).
      if ARGV[0].eql?'up' or ARGV[0].eql?'provision'
        if defined? host['sshkey']
          private_key_file = File.expand_path(host['sshkey'])
        end
      end
      unless File.exists?(private_key_file) or
      key_has_passphrase(private_key_file)
        machine.vm.provision "provision-private-key",
          :type => "file",
          :source => "#{private_key_file}",
          :destination => "/#{key_home_dir}/.ssh/id_rsa"
    
        machine.vm.provision "provision-public-key",
          :type => "file",
          :source => "#{private_key_file}.pub",
          :destination => "/#{key_home_dir}/.ssh/id_rsa.pub"
    
        # Fixing permissions.
        machine.vm.provision "chmod-key",
          :type => "shell",
          :privileged => false,
          :inline => "chmod 600 /#{key_home_dir}/.ssh/id_rsa"
      end

      # Run Ansible playbooks only from the controller machine
      if host['is_controller']

        machine.vm.provision "drupsible", type: "shell" do |sh|
          sh.path = "scripts/drupsible-provision.sh"
        end

        machine.vm.provision "shortcuts", type: "shell",
          inline: 'cat /vagrant/scripts/shortcuts.sh >> /home/vagrant/.profile'

        # Config-deploy each of the apps
        APPS.each do |app|
          machine.vm.provision "alias", type: "shell",
            inline: 'sed "s|pitiribi|' + app['name'] + '|g" /vagrant/scripts/app-aliases.sh >> /home/vagrant/.profile'

          # Scaffold directories and symlinks
          machine.vm.provision "scaffold", type: "shell" do |sh|
            sh.path = "scripts/scaffold.sh"
            sh.args = [app['name']]
          end

          # Run config-deploy.yml playbook
          machine.vm.provision "playbooks", type: "shell" do |sh|
            sh.path = "scripts/drupsible-deploy.sh"
            sh.args = [ app['name'], "local", ENV['DEPLOY_ARGS'].to_s, ENV['TAGS'].to_s,  ENV['SKIP_TAGS'].to_s, host['fqdn'], host['ip_addr'].to_s ]
            sh.privileged = false
            sh.keep_color = true
          end
        end # APPS-each
      end # if controller
    end # config machine
  end # HOSTS-each
end
